/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package exercice

fun main() {
    val n = readLine()!!.toInt()
    val shortcuts = readLine()!!.split(' ').map { it.toInt() }
    val costs = computeCost(n, shortcuts.toIntArray())
    println(costs.joinToString(" "))
}

fun computeCost(n: Int, shortcuts: IntArray): IntArray {
    val shortcutOrigin = mutableMapOf<Int, Int>().apply {
        shortcuts.forEachIndexed { origin, target ->
            // target is 1-indexed
            if (origin < target - 1) { // if shortcut doesn't link to itself
                putIfAbsent(target - 1, origin)
            }
        }
    }
    val costs = IntArray(n)
    costs[0] = 0 // 1
    for (i in 1 until n) {
        costs[i] = Math.min(
            costs[i - 1] + 1,
            shortcutOrigin[i]?.let { origin -> costs[origin] + 1 } ?: Int.MAX_VALUE
        )
    }

    return costs
}
